/*
 * Copyright (C) 2023-2024 Malcolm Rozé.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.sansenshimizu.sakuraboot.test.functional.openapi;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.ValidatableResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ActiveProfiles;

/**
 * The interface for openapi functional tests.
 * <p>
 * <b>Example:</b>
 * </p>
 * <p>
 * To create a concrete test class that inherits from {@link OpenApiFT},
 * follow these steps:
 * </p>
 * <p>
 * Implements the {@link OpenApiFT} class:
 * </p>
 * <blockquote>
 *
 * <pre>
 * public class YourFT implements OpenApiFT {
 *
 *     &#064;LocalServerPort
 *     private int port;
 *
 *     &#064;Override
 *     public int getPort() {
 *
 *         return port;
 *     }
 * }
 * </pre>
 *
 * </blockquote>
 *
 * @author Malcolm Rozé
 * @since  0.1.0
 */
@SuppressWarnings("InterfaceMayBeAnnotatedFunctional")
@ActiveProfiles("test")
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public interface OpenApiFT {

    /**
     * The base URI use by the server in this test.
     */
    String BASE_URI = "http://localhost";

    /**
     * The port use by the server in this test.
     *
     * @return The local port.
     */
    int getPort();

    /**
     * The setUp function call before every test.
     */
    @SuppressWarnings("java:S2696")
    @BeforeEach
    default void setUp() {

        RestAssured.baseURI = BASE_URI;
        RestAssured.port = getPort();
        RestAssured.basePath = getBasePath();
    }

    /**
     * The base path to get the documentation generated by openapi.
     *
     * @return The base path to get the documentation.
     */
    default String getBasePath() {

        return "api/api-docs";
    }

    @Test
    @DisplayName("GIVEN a openapi configuration,"
        + " WHEN create documentation,"
        + " THEN the controller should use the configuration and create "
        + "documentation")
    default void testDocumentation() {

        // WHEN
        final ValidatableResponse response
            = RestAssured.given().when().get().then();

        // THEN
        response.assertThat()
            .statusCode(HttpStatus.OK.value())
            .contentType(ContentType.JSON);
    }
}
